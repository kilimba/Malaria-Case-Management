/*Kilimba Analytix*/

package com.mcm2.tracking.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.mcm2.tracking.service.DepartmentService;
import com.mcm2.tracking.service.HealthFacilityService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.mcm2.tracking.*;
import com.mcm2.tracking.service.*;


/**
 * Controller object for domain model class HealthFacility.
 * @see com.mcm2.tracking.HealthFacility
 */

@RestController(value = "Tracking.HealthFacilityController")
@Api(value = "/tracking/HealthFacility", description = "Exposes APIs to work with HealthFacility resource.")
@RequestMapping("/tracking/HealthFacility")
public class HealthFacilityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(HealthFacilityController.class);

	@Autowired
	@Qualifier("tracking.HealthFacilityService")
	private HealthFacilityService healthFacilityService;


    @Autowired
    @Qualifier("tracking.DepartmentService")
    private DepartmentService departmentService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of HealthFacility instances matching the search criteria.")
	public Page<HealthFacility> findHealthFacilitys( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering HealthFacilitys list");
		return healthFacilityService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of HealthFacility instances.")
	public Page<HealthFacility> getHealthFacilitys(Pageable pageable) {
		LOGGER.debug("Rendering HealthFacilitys list");
		return healthFacilityService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of HealthFacility instances.")
	public Long countAllHealthFacilitys() {
		LOGGER.debug("counting HealthFacilitys");
		Long count = healthFacilityService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the HealthFacility instance associated with the given id.")
    public HealthFacility getHealthFacility(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting HealthFacility with id: {}" , id);
        HealthFacility instance = healthFacilityService.findById(id);
        LOGGER.debug("HealthFacility details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the HealthFacility instance associated with the given id.")
    public boolean deleteHealthFacility(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting HealthFacility with id: {}" , id);
        HealthFacility deleted = healthFacilityService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the HealthFacility instance associated with the given id.")
    public HealthFacility editHealthFacility(@PathVariable("id") Integer id, @RequestBody HealthFacility instance) throws EntityNotFoundException {
        LOGGER.debug("Editing HealthFacility with id: {}" , instance.getId());
        instance.setId(id);
        instance = healthFacilityService.update(instance);
        LOGGER.debug("HealthFacility details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/departments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the departments instance associated with the given id.")
     public Page<Department> findAssociateddepartments(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated departments");
        return departmentService.findAssociatedValues(id,"healthFacility","id", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new HealthFacility instance.")
	public HealthFacility createHealthFacility(@RequestBody HealthFacility instance) {
		LOGGER.debug("Create HealthFacility with information: {}" , instance);
		instance = healthFacilityService.create(instance);
		LOGGER.debug("Created HealthFacility with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setHealthFacilityService(HealthFacilityService service) {
		this.healthFacilityService = service;
	}
}


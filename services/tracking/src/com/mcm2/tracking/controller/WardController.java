/*Kilimba Analytix*/

package com.mcm2.tracking.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.mcm2.tracking.service.VillageService;
import com.mcm2.tracking.service.WardService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.mcm2.tracking.*;
import com.mcm2.tracking.service.*;


/**
 * Controller object for domain model class Ward.
 * @see com.mcm2.tracking.Ward
 */

@RestController(value = "Tracking.WardController")
@Api(value = "/tracking/Ward", description = "Exposes APIs to work with Ward resource.")
@RequestMapping("/tracking/Ward")
public class WardController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WardController.class);

	@Autowired
	@Qualifier("tracking.WardService")
	private WardService wardService;


    @Autowired
    @Qualifier("tracking.VillageService")
    private VillageService villageService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Ward instances matching the search criteria.")
	public Page<Ward> findWards( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Wards list");
		return wardService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Ward instances.")
	public Page<Ward> getWards(Pageable pageable) {
		LOGGER.debug("Rendering Wards list");
		return wardService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Ward instances.")
	public Long countAllWards() {
		LOGGER.debug("counting Wards");
		Long count = wardService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Ward instance associated with the given id.")
    public Ward getWard(@PathVariable("id") short id) throws EntityNotFoundException {
        LOGGER.debug("Getting Ward with id: {}" , id);
        Ward instance = wardService.findById(id);
        LOGGER.debug("Ward details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Ward instance associated with the given id.")
    public boolean deleteWard(@PathVariable("id") short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Ward with id: {}" , id);
        Ward deleted = wardService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Ward instance associated with the given id.")
    public Ward editWard(@PathVariable("id") short id, @RequestBody Ward instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Ward with id: {}" , instance.getWardId());
        instance.setWardId(id);
        instance = wardService.update(instance);
        LOGGER.debug("Ward details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/villages", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the villages instance associated with the given id.")
     public Page<Village> findAssociatedvillages(Pageable pageable, @PathVariable("id") short id){
        LOGGER.debug("Fetching all associated villages");
        return villageService.findAssociatedValues(id,"ward","wardId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Ward instance.")
	public Ward createWard(@RequestBody Ward instance) {
		LOGGER.debug("Create Ward with information: {}" , instance);
		instance = wardService.create(instance);
		LOGGER.debug("Created Ward with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setWardService(WardService service) {
		this.wardService = service;
	}
}


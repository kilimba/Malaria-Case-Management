/*Kilimba Analytix*/

package com.mcm2.tracking.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.mcm2.tracking.service.HamletService;
import com.mcm2.tracking.service.VillageService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.mcm2.tracking.*;
import com.mcm2.tracking.service.*;


/**
 * Controller object for domain model class Village.
 * @see com.mcm2.tracking.Village
 */

@RestController(value = "Tracking.VillageController")
@Api(value = "/tracking/Village", description = "Exposes APIs to work with Village resource.")
@RequestMapping("/tracking/Village")
public class VillageController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VillageController.class);

	@Autowired
	@Qualifier("tracking.VillageService")
	private VillageService villageService;


    @Autowired
    @Qualifier("tracking.HamletService")
    private HamletService hamletService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Village instances matching the search criteria.")
	public Page<Village> findVillages( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Villages list");
		return villageService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Village instances.")
	public Page<Village> getVillages(Pageable pageable) {
		LOGGER.debug("Rendering Villages list");
		return villageService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Village instances.")
	public Long countAllVillages() {
		LOGGER.debug("counting Villages");
		Long count = villageService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Village instance associated with the given id.")
    public Village getVillage(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Village with id: {}" , id);
        Village instance = villageService.findById(id);
        LOGGER.debug("Village details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Village instance associated with the given id.")
    public boolean deleteVillage(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Village with id: {}" , id);
        Village deleted = villageService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Village instance associated with the given id.")
    public Village editVillage(@PathVariable("id") Integer id, @RequestBody Village instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Village with id: {}" , instance.getVillageId());
        instance.setVillageId(id);
        instance = villageService.update(instance);
        LOGGER.debug("Village details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/hamlets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the hamlets instance associated with the given id.")
     public Page<Hamlet> findAssociatedhamlets(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated hamlets");
        return hamletService.findAssociatedValues(id,"village","villageId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Village instance.")
	public Village createVillage(@RequestBody Village instance) {
		LOGGER.debug("Create Village with information: {}" , instance);
		instance = villageService.create(instance);
		LOGGER.debug("Created Village with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setVillageService(VillageService service) {
		this.villageService = service;
	}
}


/*Kilimba Analytix*/

package com.mcm2.tracking.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.mcm2.tracking.service.HealthworkerService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.mcm2.tracking.*;
import com.mcm2.tracking.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Healthworker.
 * @see com.mcm2.tracking.Healthworker
 */
@RestController(value = "Tracking.HealthworkerController")
@RequestMapping("/tracking/Healthworker")
@Api(description = "Exposes APIs to work with Healthworker resource.", value = "HealthworkerController")
public class HealthworkerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(HealthworkerController.class);

    @Autowired
    @Qualifier("tracking.HealthworkerService")
    private HealthworkerService healthworkerService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Healthworker instances matching the search criteria.")
    public Page<Healthworker> findHealthworkers(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Healthworkers list");
        return healthworkerService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Healthworker instances.")
    public Page<Healthworker> getHealthworkers(Pageable pageable) {
        LOGGER.debug("Rendering Healthworkers list");
        return healthworkerService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Healthworker instance associated with the given id.")
    public Healthworker getHealthworker(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Healthworker with id: {}", id);
        Healthworker instance = healthworkerService.findById(id);
        LOGGER.debug("Healthworker details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Healthworker instance associated with the given id.")
    public boolean deleteHealthworker(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Healthworker with id: {}", id);
        Healthworker deleted = healthworkerService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Healthworker instance associated with the given id.")
    public Healthworker editHealthworker(@PathVariable("id") Integer id, @RequestBody Healthworker instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Healthworker with id: {}", instance.getId());
        instance.setId(id);
        instance = healthworkerService.update(instance);
        LOGGER.debug("Healthworker details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Healthworker instance.")
    public Healthworker createHealthworker(@RequestBody Healthworker instance) {
        LOGGER.debug("Create Healthworker with information: {}", instance);
        instance = healthworkerService.create(instance);
        LOGGER.debug("Created Healthworker with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setHealthworkerService(HealthworkerService service) {
        this.healthworkerService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Healthworker instances.")
    public Long countAllHealthworkers() {
        LOGGER.debug("counting Healthworkers");
        Long count = healthworkerService.countAll();
        return count;
    }
}

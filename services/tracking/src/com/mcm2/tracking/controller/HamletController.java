/*Kilimba Analytix*/

package com.mcm2.tracking.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.mcm2.tracking.service.HamletService;
import com.mcm2.tracking.service.HealthFacilityService;
import com.mcm2.tracking.service.PatientService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.mcm2.tracking.*;
import com.mcm2.tracking.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Hamlet.
 * @see com.mcm2.tracking.Hamlet
 */
@RestController(value = "Tracking.HamletController")
@RequestMapping("/tracking/Hamlet")
@Api(description = "Exposes APIs to work with Hamlet resource.", value = "HamletController")
public class HamletController {

    private static final Logger LOGGER = LoggerFactory.getLogger(HamletController.class);

    @Autowired
    @Qualifier("tracking.HamletService")
    private HamletService hamletService;

    @Autowired
    @Qualifier("tracking.PatientService")
    private PatientService patientService;

    @Autowired
    @Qualifier("tracking.HealthFacilityService")
    private HealthFacilityService healthFacilityService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Hamlet instances matching the search criteria.")
    public Page<Hamlet> findHamlets(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Hamlets list");
        return hamletService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Hamlet instances.")
    public Page<Hamlet> getHamlets(Pageable pageable) {
        LOGGER.debug("Rendering Hamlets list");
        return hamletService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Hamlet instance associated with the given id.")
    public Hamlet getHamlet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Hamlet with id: {}", id);
        Hamlet instance = hamletService.findById(id);
        LOGGER.debug("Hamlet details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Hamlet instance associated with the given id.")
    public boolean deleteHamlet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Hamlet with id: {}", id);
        Hamlet deleted = hamletService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Hamlet instance associated with the given id.")
    public Hamlet editHamlet(@PathVariable("id") Integer id, @RequestBody Hamlet instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Hamlet with id: {}", instance.getHamletId());
        instance.setHamletId(id);
        instance = hamletService.update(instance);
        LOGGER.debug("Hamlet details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}/patients", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the patients instance associated with the given id.")
    public Page<Patient> findAssociatedpatients(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated patients");
        return patientService.findAssociatedValues(id, "hamlet", "hamletId", pageable);
    }

    @RequestMapping(value = "/{id:.+}/healthFacilities", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the healthFacilities instance associated with the given id.")
    public Page<HealthFacility> findAssociatedhealthFacilities(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated healthFacilities");
        return healthFacilityService.findAssociatedValues(id, "hamlet", "hamletId", pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Hamlet instance.")
    public Hamlet createHamlet(@RequestBody Hamlet instance) {
        LOGGER.debug("Create Hamlet with information: {}", instance);
        instance = hamletService.create(instance);
        LOGGER.debug("Created Hamlet with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setHamletService(HamletService service) {
        this.hamletService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Hamlet instances.")
    public Long countAllHamlets() {
        LOGGER.debug("counting Hamlets");
        Long count = hamletService.countAll();
        return count;
    }
}

/*Kilimba Analytix*/

package com.mcm2.tracking.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.mcm2.tracking.*;

/**
 * Service object for domain model class PatientResults.
 * @see com.mcm2.tracking.PatientResults
 */

public interface PatientResultsService {
   /**
	 * Creates a new patientresults.
	 * 
	 * @param created
	 *            The information of the created patientresults.
	 * @return The created patientresults.
	 */
	public PatientResults create(PatientResults created);

	/**
	 * Deletes a patientresults.
	 * 
	 * @param patientresultsId
	 *            The id of the deleted patientresults.
	 * @return The deleted patientresults.
	 * @throws EntityNotFoundException
	 *             if no patientresults is found with the given id.
	 */
	public PatientResults delete(Integer patientresultsId) throws EntityNotFoundException;

	/**
	 * Finds all patientresultss.
	 * 
	 * @return A list of patientresultss.
	 */
	public Page<PatientResults> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PatientResults> findAll(Pageable pageable);
	
	/**
	 * Finds patientresults by id.
	 * 
	 * @param id
	 *            The id of the wanted patientresults.
	 * @return The found patientresults. If no patientresults is found, this method returns
	 *         null.
	 */
	public PatientResults findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a patientresults.
	 * 
	 * @param updated
	 *            The information of the updated patientresults.
	 * @return The updated patientresults.
	 * @throws EntityNotFoundException
	 *             if no patientresults is found with given id.
	 */
	public PatientResults update(PatientResults updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the patientresultss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the patientresults.
	 */

	public long countAll();


    public Page<PatientResults> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}


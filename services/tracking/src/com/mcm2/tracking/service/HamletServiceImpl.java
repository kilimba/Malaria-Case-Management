/*Kilimba Analytix*/

package com.mcm2.tracking.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.mcm2.tracking.*;


/**
 * ServiceImpl object for domain model class Hamlet.
 * @see com.mcm2.tracking.Hamlet
 */
@Service("tracking.HamletService")
public class HamletServiceImpl implements HamletService {


    private static final Logger LOGGER = LoggerFactory.getLogger(HamletServiceImpl.class);

    @Autowired
    @Qualifier("tracking.HamletDao")
    private WMGenericDao<Hamlet, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Hamlet, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "trackingTransactionManager")
     public Page<Hamlet> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "trackingTransactionManager")
    @Override
    public Hamlet create(Hamlet hamlet) {
        LOGGER.debug("Creating a new hamlet with information: {}" , hamlet);
        return this.wmGenericDao.create(hamlet);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "trackingTransactionManager")
    @Override
    public Hamlet delete(Integer hamletId) throws EntityNotFoundException {
        LOGGER.debug("Deleting hamlet with id: {}" , hamletId);
        Hamlet deleted = this.wmGenericDao.findById(hamletId);
        if (deleted == null) {
            LOGGER.debug("No hamlet found with id: {}" , hamletId);
            throw new EntityNotFoundException(String.valueOf(hamletId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "trackingTransactionManager")
    @Override
    public Page<Hamlet> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all hamlets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "trackingTransactionManager")
    @Override
    public Page<Hamlet> findAll(Pageable pageable) {
        LOGGER.debug("Finding all hamlets");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "trackingTransactionManager")
    @Override
    public Hamlet findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding hamlet by id: {}" , id);
        Hamlet hamlet=this.wmGenericDao.findById(id);
        if(hamlet==null){
            LOGGER.debug("No hamlet found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return hamlet;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "trackingTransactionManager")
    @Override
    public Hamlet update(Hamlet updated) throws EntityNotFoundException {
        LOGGER.debug("Updating hamlet with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getHamletId());
    }

    @Transactional(readOnly = true, value = "trackingTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}



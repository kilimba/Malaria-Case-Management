/*Kilimba Analytix*/

package com.mcm2.tracking;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;




/**
 * Village generated by hbm2java
 */
@Entity
@Table(name="village"
    ,schema="public"
)
public class Village  implements java.io.Serializable
 {


private Integer villageId;
private String villageName;
private Ward ward;
private Set<Hamlet> hamlets = new HashSet<Hamlet>(0);

    public Village() {
    }



     @Id @GeneratedValue(strategy=IDENTITY)

    

    @Column(name="village_id", nullable=false)
    public Integer getVillageId() {
        return this.villageId;
    }
    
    public void setVillageId(Integer villageId) {
        this.villageId = villageId;
    }

    

    @Column(name="village_name")
    public String getVillageName() {
        return this.villageName;
    }
    
    public void setVillageName(String villageName) {
        this.villageName = villageName;
    }

@ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="ward")
    public Ward getWard() {
        return this.ward;
    }
    
    public void setWard(Ward ward) {
        this.ward = ward;
    }

@OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="village")
    public Set<Hamlet> getHamlets() {
        return this.hamlets;
    }
    
    public void setHamlets(Set<Hamlet> hamlets) {
        this.hamlets = hamlets;
    }



public boolean equals(Object o) {
         if (this == o)
         return true;
		 if ( (o == null ) )
		 return false;
		 if ( !(o instanceof Village) )
		 return false;

		 Village that = ( Village ) o;

		 return ( (this.getVillageId()==that.getVillageId()) || ( this.getVillageId()!=null && that.getVillageId()!=null && this.getVillageId().equals(that.getVillageId()) ) );

   }

   public int hashCode() {
         int result = 17;

         result = 37 * result + ( getVillageId() == null ? 0 : this.getVillageId().hashCode() );

         return result;
     }


}

